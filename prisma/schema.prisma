// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  username       String           @unique
  name           String
  email          String
  emailVerified  Boolean?
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollments    Enrollment[]
  lessonProgress LessonProgress[]
  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  displayUsername String?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum CourseLevel {
  Principiante
  Intermedio
  Avanzado
}

enum CourseStatus {
  Borrador
  Publicado
  Archivado
}

model Course {
  id String @id @default(uuid())

  title            String
  description      String
  fileKey          String
  duration         Int
  level            CourseLevel  @default(Principiante)
  category         String
  smallDescription String
  slug             String       @unique
  status           CourseStatus @default(Borrador)
  chapter          Chapter[]
  enrollment       Enrollment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id       String   @id @default(uuid())
  title    String
  position Int
  lessons  Lesson[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id           String  @id @default(uuid())
  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  chapterId      String
  chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id     String           @id @default(uuid())
  status EnrollmentStatus @default(Pending)

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId   String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id        String  @id @default(uuid())
  completed Boolean @default(false)

  userId   String
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId String
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}
